x-mongodb-healthcheck: &mongodb-healthcheck
  healthcheck:
    test: echo 'db.runCommand("ping").ok' | mongosh 127.0.0.1:27017/test --quiet
    interval: 10s
    timeout: 10s
    retries: 5
    start_period: 40s

x-elasticsearch-healthcheck: &elasticsearch-healthcheck
  healthcheck:
    interval: 5s
    retries: 80
    test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://127.0.0.1:9200

x-memcached-healthcheck: &memcached-healthcheck
  healthcheck:
    test: echo stats | nc 127.0.0.1 11211
    interval: 10s
    retries: 60

services:
  server:
    image: serv:latest
    ports:
      - "8000:8080"
    networks:
      - elasticnet

  mongo_db_node_01:
    image: mongo:7.0.2
    <<: [ *mongodb-healthcheck ]
    volumes:
      - mongodata1:/data/mongo_node_01:/data/db
    command: mongod --replSet docker-replicaset
    ports:
      - "27017:27017"
    networks:
      - elasticnet

  mongo_db_node_02:
    image: mongo:7.0.2
    <<: [ *mongodb-healthcheck ]
    volumes:
      - mongodata2:/data/mongo_node_02:/data/db
    command: mongod --replSet docker-replicaset
    ports:
      - "27018:27017"
    networks:
      - elasticnet

  mongo_db_node_03:
    image: mongo:7.0.2
    <<: [ *mongodb-healthcheck ]
    volumes:
      - mongodata3:/data/mongo_node_03:/data/db
    command: mongod --replSet docker-replicaset
    ports:
      - "27019:27017"
    networks:
      - elasticnet

  mongo_cluster_init:
    image: mongo:7.0.2
    depends_on:
      mongo_db_node_01:
        condition: service_healthy
      mongo_db_node_02:
        condition: service_healthy
      mongo_db_node_03:
        condition: service_healthy
    volumes:
      - init-mongo.js:/infrastructure/init-mongo.js
    entrypoint: [ "mongosh", "--host", "host.docker.internal", "--port", "27017", "--file", "/infrastructure/init-mongo.js"]

  elasticsearch_node_main:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.3
    environment:
      - node.name=es-master
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=elasticsearch-data1,elasticsearch-data2,elasticsearch-data3
      - cluster.initial_master_nodes=es-master
      - node.roles=master
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticdatamain:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - elasticnet

  elasticsearch_node_1:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.3
    environment:
      - node.name=es-data1
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=elasticsearch-master,elasticsearch-data2,elasticsearch-data3
      - node.roles=data
      - "ES_JAVA_OPTS=-Xms512m -Xmx2048m"
      - xpack.security.enabled=false
    volumes:
      - elasticdata1:/usr/share/elasticsearch/data
    networks:
      - elasticnet

  elasticsearch_node_2:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.3
    environment:
      - node.name=es-data2
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=elasticsearch-master,elasticsearch-data1,elasticsearch-data3
      - node.roles=data
      - "ES_JAVA_OPTS=-Xms512m -Xmx2048m"
      - xpack.security.enabled=false
    volumes:
      - elasticdata2:/usr/share/elasticsearch/data
    networks:
      - elasticnet

  elasticsearch_node_3:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.3
    environment:
      - node.name=es-data3
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=elasticsearch-master,elasticsearch-data1,elasticsearch-data2
      - node.roles=data
      - "ES_JAVA_OPTS=-Xms512m -Xmx2048m"
      - xpack.security.enabled=false
    volumes:
      - elasticdata3:/usr/share/elasticsearch/data
    networks:
      - elasticnet

  memcached_node_01:
    image: memcached:alpine
    <<: [ *memcached-healthcheck ]
    ports:
      - "11211:11211"

  memcached_node_02:
    image: memcached:alpine
    <<: [ *memcached-healthcheck ]
    ports:
      - "11212:11211"

  memcached_node_03:
    image: memcached:alpine
    <<: [ *memcached-healthcheck ]
    ports:
      - "11213:11211"

volumes:
  elasticdatamain:
  elasticdata1:
  elasticdata2:
  elasticdata3:
  mongodata1:
  mongodata2:
  mongodata3:
  init-mongo.js:

networks:
  elasticnet: